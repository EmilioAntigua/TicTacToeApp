Create.razor:
@page "/jugadores/create"
@rendermode InteractiveServer

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@inject ToastService toastService

<PageTitle>Registrar Jugador</PageTitle>

<EditForm Model="JugadorModel" OnValidSubmit="Guardar" FormName="JugadorCreateForm">
    <DataAnnotationsValidator />

    <ValidationSummary />
    <div class="alert alert-danger mt-2" role="alert"
         style="display:@(EditContext?.GetValidationMessages().Any() == true ? "block" : "none")">
        Corrige los errores antes de continuar.
    </div>

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white">
                <h5 class="card-title">Registrar Jugador</h5>
            </div>

            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label"><strong>Nombres</strong></label>
                    <InputText class="form-control" @bind-Value="JugadorModel.Nombres"></InputText>
                </div>

                <div class="mb-3">
                    <label class="form-label"><strong>Partidas</strong></label>
                    <InputNumber class="form-control" @bind-Value="JugadorModel.Partidas"></InputNumber>
                </div>
            </div>

            <div class="card-footer text-center mt-2">
                <a href="/jugadores" class="btn btn-secondary">
                    <span class="bi bi-arrow-left"></span> Volver
                </a>
                <button type="submit" class="btn btn-success">
                    <span class="bi bi-floppy"></span> Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Jugador JugadorModel { get; set; } = new Jugador();
    private EditContext? EditContext;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(JugadorModel);
    }

    private async Task Guardar()
    {
        if (await jugadoresService.ExisteNombre(JugadorModel.Nombres))
        {
            toastService.ShowWarning("Ya existe un jugador con ese nombre");
            return;
        }

        var creado = await jugadoresService.Guardar(JugadorModel);

        if (creado)
        {
            toastService.ShowSuccess("Jugador registrado correctamente");
            navigationManager.NavigateTo("/jugadores", true);
        }
        else
        {
            toastService.ShowError("No se pudo registrar el jugador");
        }
    }
}


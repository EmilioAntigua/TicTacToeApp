@page "/jugadores"
@rendermode InteractiveServer

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@inject IJSRuntime js
@inject ToastService toastService

<PageTitle>Registro de Jugadores</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">Registro de Jugadores</h5>
            <a href="/jugadores/create" class="btn btn-success">
                <span class="bi bi-plus-square"></span> Crear
            </a>
        </div>

        <div class="card-body">
            <div class="row mb-3">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro">
                        <option value="" disabled selected>Elija una opción</option>
                        <option value="Nombres">Nombre</option>
                        <option value="Partidas">Partidas</option>
                    </InputSelect>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-outline-primary" @onclick="Buscar">
                            <span class="bi bi-search"></span>
                        </button>
                        <button type="button" class="btn btn-outline-secondary ms-2" @onclick="Restablecer">
                            <span class="bi bi-arrow-clockwise"></span> Restablecer
                        </button>
                    </div>
                </div>
            </div>

            <table class="table table-hover">
                <thead class="table table-striped text-black">
                    <tr>
                        <th>JugadorId</th>
                        <th>Nombres</th>
                        <th>Partidas</th>
                        <th class="text-center">Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ListaJugadores.Any())
                    {
                        @foreach (var jugador in ListaJugadores)
                        {
                            <tr>
                                <td>@jugador.JugadorId</td>
                                <td>@jugador.Nombres</td>
                                <td>@jugador.Partidas</td>
                                <td class="text-center">
                                    <a href="/jugadores/edit/@jugador.JugadorId" class="btn btn-outline-primary">
                                        <span class="bi bi-pencil-square"></span>
                                    </a>
                                    <button class="btn btn-outline-danger ms-2" @onclick="() => Eliminar(jugador)">
                                        <span class="bi bi-trash"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center text-muted">No hay jugadores registrados</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="card-footer space-between">
            <label>Cantidad: @ListaJugadores.Count()</label>
            <label>Total Partidas: @ListaJugadores.Sum(j => j.Partidas)</label>
        </div>
    </div>
</div>

@code {
    public List<Jugador> ListaJugadores { get; set; } = new List<Jugador>();
    public string Filtro { get; set; } = string.Empty;
    public string ValorFiltro { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaJugadores = await jugadoresService.GetList(j => j.JugadorId > 0);
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(ValorFiltro))
        {
            if (Filtro == "Nombres")
            {
                ListaJugadores = await jugadoresService.GetList(
                    j => j.Nombres.ToLower().Contains(ValorFiltro.ToLower())
                );
            }
            else if (Filtro == "Partidas" && int.TryParse(ValorFiltro, out int partidas))
            {
                ListaJugadores = await jugadoresService.GetList(j => j.Partidas == partidas);
            }
        }
        else
        {
            ListaJugadores = await jugadoresService.GetList(j => j.JugadorId > 0);
        }
    }

    private async Task Restablecer()
    {
        ListaJugadores = await jugadoresService.GetList(j => j.JugadorId > 0);
        Filtro = string.Empty;
        ValorFiltro = string.Empty;
    }

    private async Task Eliminar(Jugador jugador)
    {
        bool confirmar = await js.InvokeAsync<bool>("confirm", $"¿Seguro que deseas eliminar a {jugador.Nombres}?");
        if (confirmar)
        {
            var eliminado = await jugadoresService.Eliminar(jugador.JugadorId);
            if (eliminado)
            {
                toastService.ShowSuccess("Jugador eliminado correctamente");
                ListaJugadores = await jugadoresService.GetList(j => j.JugadorId > 0);
            }
            else
            {
                toastService.ShowError("No se pudo eliminar el jugador");
            }
        }
    }
}